package com.game.renderer{	import flash.utils.Dictionary;	import flash.display.Bitmap;	import com.game.Game;	import flash.display.BitmapData;	import flash.display.Sprite;	import flash.events.Event;	import flash.geom.Point;	import flash.geom.Rectangle;		public class Renderer extends Sprite	{				private var canvas		: BitmapData;				/** Vector Arrays **/		private var __layers	: Vector.<RenderLayer>;		private var layers		: Dictionary;				/** Layers **/				/** arbitrary non-data related objectsd **/		private var __pt	: Point;		private var __rect	: Rectangle;				public function Renderer ( __width:Number = 500, __height:Number = 300, __fps:Number = 30)		{			/** set the game variables **/			Game.WIDTH	= __width;			Game.HEIGHT	= __height;			Game.FPS	= __fps;						/** arbitrary values **/			__pt		= new Point;			__rect		= new Rectangle ( 0, 0, Game.WIDTH, Game.HEIGHT );						/** set the vector arrays **/			__layers	= new Vector.<RenderLayer>;			layers		= new Dictionary;						/** set the layers and main canvas **/									/** set the canvas **/			canvas				= new BitmapData ( Game.WIDTH, Game.HEIGHT, false, 0xff000000 );						addChild( new Bitmap( canvas, 'auto', true ));					}				public function startRender () : void 		{			addEventListener( Event.ENTER_FRAME, render );		}				public function stopRender () : void		{			removeEventListener( Event.ENTER_FRAME, render );		}				public function addLayer ( layername : String ) : RenderLayer		{			var layer	: RenderLayer;			layer		= new RenderLayer( Game.WIDTH, Game.HEIGHT );			layer.name	= layername;			__layers.push ( layer );			layers [ layer.name ] = layer;			return layer;		}				public function getLayer ( layername : String ) : RenderLayer		{			if ( !layers[ layername ])			{				throw new Error( 'layer `' + layername + '` not found in Renderer');			}						return layers[ layername ];		}				public function render ( e:Event ) : void		{			canvas.lock ();			canvas.fillRect ( __rect, 0xffffffff );			renderLayers ();						canvas.unlock ();		}				private function renderLayers() : void		{			var i : int;						for ( i = 0 ; i < __layers.length; i++ )			{				__layers[i].render ();				canvas.copyPixels ( __layers[i].bitmapData, __rect, __pt, null, null, true );			}		}	}}