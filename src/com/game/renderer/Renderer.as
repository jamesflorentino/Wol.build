package com.game.renderer{	import com.game.Game;	import com.game.Sheets;	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.Sprite;	import flash.events.Event;	import flash.geom.Point;	import flash.geom.Rectangle;		public class Renderer extends Sprite	{				// temporary shit		[Embed(source="../../../../libs/bg.png")]
		private var embeddedClass : Class;				private var canvas		: BitmapData;				/** Vector Arrays **/		private var units		: Vector.<RenderItem>;		private var layers			: Vector.<BitmapData>;				/** Layers **/		protected var layer_canvasbg	: BitmapData; // the flat colored-background of the canvas		protected var layer_background	: BitmapData;		protected var layer_grids		: BitmapData;		protected var layer_units		: BitmapData;				/** arbitrary non-data related objectsd **/		private var __pt	: Point;		private var __rect	: Rectangle;				public function Renderer ( __width:Number = 500, __height:Number = 300, __fps:Number = 30)		{			/** set the game variables **/			Game.WIDTH	= __width;			Game.HEIGHT	= __height;			Game.FPS	= __fps;						/** arbitrary values **/			__pt		= new Point;			__rect		= new Rectangle ( 0, 0, Game.WIDTH, Game.HEIGHT );						/** set the vector arrays **/			units		= new Vector.<RenderItem>;			layers		= new Vector.<BitmapData>;						/** set the layers and main canvas **/			layer_canvasbg		= new BitmapData ( Game.WIDTH, Game.HEIGHT, true, 0xff000000 );			layer_background	= new BitmapData ( Game.WIDTH, Game.HEIGHT, true, 0x00000000 );			layer_grids			= new BitmapData ( Game.WIDTH, Game.HEIGHT, true, 0x00000000 );			layer_units			= new BitmapData ( Game.WIDTH, Game.HEIGHT, true, 0x00000000 );						layers.push ( layer_background );			layers.push ( layer_grids );			layers.push ( layer_units );						/** set the canvas **/			canvas				= new BitmapData ( Game.WIDTH, Game.HEIGHT, false, 0xff000000 );						/** other TODOs **/			layer_background.draw ( new embeddedClass as Bitmap );			addChild( new Bitmap ( canvas ) );		}				public function startRender () : void 		{			addEventListener( Event.ENTER_FRAME, render );		}				public function stopRender () : void		{			removeEventListener( Event.ENTER_FRAME, render );		}				public function addEntity ( entity:RenderItem ) : void		{			units.push( entity );		}				public function render ( e:Event ) : void		{			canvas.lock ();						canvas.fillRect ( __rect, 0x000000 );			renderBackground ();			renderUnits ();			renderLayers ();						canvas.unlock ();		}				private function renderLayers() : void		{			var i : int;						for ( i = 0 ; i < layers.length; i++ )			{				canvas.copyPixels ( layers[i], __rect, __pt, null, null, true );			}		}				private function renderBackground () : void		{			canvas.copyPixels			(				layer_canvasbg,				layer_canvasbg.rect,				__pt			);		}				private function renderUnits () : void		{			var i 		: uint;			var renderitem	: RenderItem;						layer_units.fillRect ( __rect, 0x00000000 );							for( i = 0 ; i < units.length; i++ )			{				renderitem	= units[i];				renderitem.update ();				layer_units.copyPixels 				(					Sheets.getSheet ( renderitem.sheet )[ renderitem.currentFrame ],					renderitem.rect,					renderitem.position,					null,					null,					true				);			}		}							}}