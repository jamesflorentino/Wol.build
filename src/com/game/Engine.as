package com.game{	import flash.geom.Rectangle;	import flash.geom.Point;	import com.game.display.Entity;	import flash.events.Event;	import flash.display.Sprite;	import flash.display.Bitmap;	import flash.display.BitmapData;		public class Engine extends Sprite	{		private var canvas		: BitmapData;				/** Vector Arrays **/		private var units		: Vector.<Entity>;		private var layers			: Vector.<BitmapData>;				/** Layers **/		protected var layer_canvasbg	: BitmapData; // the flat colored-background of the canvas		protected var layer_background	: BitmapData;		protected var layer_grids		: BitmapData;		protected var layer_units		: BitmapData;				/** arbitrary non-data related objectsd **/		private var __pt	: Point;		private var __rect	: Rectangle;				public function Engine ( __width:Number = 500, __height:Number = 300, __fps:Number = 30)		{			/** set the game variables **/			Game.WIDTH	= __width;			Game.HEIGHT	= __height;			Game.FPS	= __fps;						/** arbitrary values **/			__pt		= new Point;			__rect		= new Rectangle ( 0, 0, Game.WIDTH, Game.HEIGHT );						/** set the vector arrays **/			units		= new Vector.<Entity>;			layers		= new Vector.<BitmapData>;						/** set the layers and main canvas **/			layer_canvasbg		= new BitmapData ( Game.WIDTH, Game.HEIGHT, true, 0x00000000 );			layer_background	= new BitmapData ( Game.WIDTH, Game.HEIGHT, true, 0x00000000 );			layer_grids			= new BitmapData ( Game.WIDTH, Game.HEIGHT, true, 0x00000000 );			layer_units			= new BitmapData ( Game.WIDTH, Game.HEIGHT, true, 0x00000000 );						layers.push( layer_background );			layers.push( layer_grids );			layers.push( layer_units );						/** set the canvas **/			canvas				= new BitmapData ( Game.WIDTH, Game.HEIGHT, false, 0xff000000 );						/** other TODOs **/			setCanvasBackground ();			addChild( new Bitmap ( canvas ) );		}				private function setCanvasBackground () : void		{			var __tempspritebg	: Sprite;			__tempspritebg		= new Sprite();			__tempspritebg.graphics.drawRect(0, 0, 100, 100);			__tempspritebg.graphics.beginFill(0x000000);						layer_canvasbg.draw ( __tempspritebg );		}				public function startRender () : void 		{			addEventListener( Event.ENTER_FRAME, render );		}				public function stopRender () : void		{			removeEventListener( Event.ENTER_FRAME, render );		}				public function addEntity ( entity:Entity ) : void		{			units.push( entity );		}				public function render ( e:Event ) : void		{			canvas.lock ();						renderBackground ();			renderUnits ();			canvas.copyPixels( layer_units, __rect, __pt, null, null, true );						canvas.unlock ();		}				public function renderLayers() : void		{			var i : int;						for ( i = 0 ; i < layers.length; i++ )			{				canvas.copyPixels ( layers[i], __rect, __pt, null, null, true );			}		}				protected function renderBackground () : void		{			canvas.copyPixels			(				layer_canvasbg,				layer_canvasbg.rect,				__pt			);		}				protected function renderUnits () : void		{			var i 		: uint;			var entity	: Entity;						i	= units.length;						.			while ( i-- )			{				entity	= units[i];				entity.update ();				layer_units.copyPixels 				(					Sheets.sheets ( entity.sheet )[ entity.currentFrame ],					entity.rect,					entity.position,					null,					null,					true				);			}		}							}}